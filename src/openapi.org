
* 程序框架
#+begin_src nim :exports code :noweb yes :mkdirp yes :tangle /dev/shm/openapi/src/openapi.nim
  import jester, asyncdispatch, json, random, redis, times
  import parseutils, strutils

  settings:
    port = 5080.Port

  var redis_client = redis.open()
  <<generate-lock-pin>>
  <<generate-pin>>
  <<fib>>

  routes:
    get "/":
      halt()

    <<lock-off>>
    <<lock-status>>
    <<detect>>
    <<lock-detect>>
    <<inside-light-on>>
    <<inside-light-off>>
    <<outside-light-on>>
    <<outside-light-off>>
    <<ultraviolet-on>>
    <<ultraviolet-off>>
    <<camera-on>>
    <<camera-off>>

  runforever()
#+end_src

* 用户管理
** 用户列表
** 增加用户
** 删除用户
** 修改用户
* 分组管理
** 分组列表
** 增加分组
** 修改分组
** 删除分组
* 权限管理
** 权限列表
** 增加权限
** 删除权限
** 修改权限
* 电控锁管理
** 开锁

发送开锁指令后，同时也清空缓存里的锁状态。

#+begin_src nim :noweb-ref lock-off
  put "/@boxid/locks/@boardid/@lockid":
    var
      board = parseInt(@"boardid")
      lock = parseInt(@"lockid")
      pin = generate_lock_pin(board, lock, 1)
      json = %*{"command": "lock-off", "board": board, "lock": lock, "expires-at": epochTime().toInt() + 30, "pin": pin}
      skey = "lock-status." & @"boxid" & "." & $board & "." & $lock
      dkey = "lock-detect." & @"boxid" & "." & $board & "." & $lock
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      discard redis_client.del(@[skey, dkey])
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src
** 锁状态

如果缓存中有锁的状态，则直接返回结果。否则循环三次检查缓存中是否有锁的状态，第一
次检查前，给智能柜下发查询锁状态的命令。每次循环间隔一秒，如果三次循环后，还没有
结果，则返回 404 错误。

#+begin_src nim :noweb-ref lock-status
  get "/@boxid/locks/@boardid/@lockid":
    var
      board = parseInt(@"boardid")
      lock = parseInt(@"lockid")
      pin = generate_lock_pin(board, lock, 2)
      json = %*{"command": "lock-status", "board": board, "lock": lock, "expires-at": epochTime().toInt() + 30, "pin": pin}
    var
      countdown = 7
      get_result = try: redis_client.get("lock-status." & @"boxid" & "." & $board & "." & $lock) except: redisNil finally: redis_client = redis.open()
    while get_result == redisNil and countdown > 0:
      if countdown == 7:
        try:
          discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
        except:
          redis_client = redis.open()
        await sleepAsync(fib(8 - countdown) shl 10)
      get_result = try: redis_client.get("lock-status." & @"boxid" & "." & $board & "." & $lock) except: redisNil finally: redis_client = redis.open()
      countdown -= 1
    if get_result == redisNil:
      resp Http404, ""
    elif get_result == "0":
      resp Http200, $ %*{"boxid": @"boxid", "board": board, "lock": lock, "opened": false}, "application/json"
    else:
      resp Http200, $ %*{"boxid": @"boxid", "board": board, "lock": lock, "opened": true}, "application/json"
#+end_src

** 测物状态
#+begin_src nim :noweb-ref detect
  get "/@boxid/detections/@boardid/@lockid":
    var
      board = parseInt(@"boardid")
      lock = parseInt(@"lockid")
      pin = generate_lock_pin(board, lock, 3)
      json = %*{"command": "lock-detect", "board": board, "lock": lock, "expires-at": epochTime().toInt() + 30, "pin": pin}
    var
      countdown = 7
      get_result = try: redis_client.get("lock-detect." & @"boxid" & "." & $board & "." & $lock) except: redisNil finally: redis_client = redis.open()
    while get_result == redisNil and countdown > 0:
      if countdown == 7:
        try:
          discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
        except:
          redis_client = redis.open()
        await sleepAsync(fib(8 - countdown) shl 10)
      get_result = try: redis_client.get("lock-detect." & @"boxid" & "." & $board & "." & $lock) except: redisNil finally: redis_client = redis.open()
      countdown -= 1
    if get_result == redisNil:
      resp Http404, ""
    elif get_result == "0":
      resp Http200, $ %*{"boxid": @"boxid", "board": board, "lock": lock, "empty": false}, "application/json"
    else:
      resp Http200, $ %*{"boxid": @"boxid", "board": board, "lock": lock, "empty": true}, "application/json"
#+end_src
** 开锁加测物
#+begin_src nim :noweb-ref lock-detect
  put "/@boxid/lock-detections/@boardid/@lockid":
    var
      board = parseInt(@"boardid")
      lock = parseInt(@"lockid")
      expires_at = epochTime().toInt() + 30
      json1 = %*{"command": "lock-off", "board": board, "lock": lock, "expires-at": expires_at, "pin": generate_lock_pin(board, lock, 1)}
      json2 = %*{"command": "lock-status", "board": board, "lock": lock, "expires-at": expires_at, "pin": generate_lock_pin(board, lock, 2)}
      json3 = %*{"command": "lock-detect", "board": board, "lock": lock, "expires-at": expires_at, "pin": generate_lock_pin(board, lock, 3)}
      skey = "lock-status." & @"boxid" & "." & $board & "." & $lock
      dkey = "lock-detect." & @"boxid" & "." & $board & "." & $lock
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json1)
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json2)
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json3)
      discard redis_client.del(@[skey, dkey])
      okay = true
    except:
      redis_client = redis.open()
      okay = false
    if okay:
      var
        countdown = 7
        status_get_result = try: redis_client.get("lock-status." & @"boxid" & "." & $board & "." & $lock) except: redisNil finally: redis_client = redis.open()
        detect_get_result = try: redis_client.get("lock-detect." & @"boxid" & "." & $board & "." & $lock) except: redisNil finally: redis_client = redis.open()
      while (status_get_result == redisNil or detect_get_result == redisNil) and countdown > 0:
        echo "countdown ", countdown
        await sleepAsync(fib(8 - countdown) shl 10)
        if status_get_result == redisNil:
          status_get_result = try: redis_client.get("lock-status." & @"boxid" & "." & $board & "." & $lock) except: redisNil finally: redis_client = redis.open()
        if detect_get_result == redisNil:
          detect_get_result = try: redis_client.get("lock-detect." & @"boxid" & "." & $board & "." & $lock) except: redisNil finally: redis_client = redis.open()
        countdown -= 1
      if status_get_result == redisNil or detect_get_result == redisNil:
        if status_get_result == redisNil and detect_get_result == redisNil:
          resp Http404, "Missing status and detect"
        elif status_get_result == redisNil:
          resp Http404, "Missing status"
        else:
          resp Http404, "Missing detect"
      else:
        resp Http200, $ %*{"boxid": @"boxid", "board": board, "lock": lock, "empty": if detect_get_result == "0": false else: true, "opened": if status_get_result == "0": false else: true}, "application/json"
    else:
      resp Http404, ""
#+end_src
* 内部照明管理
** 开灯

开灯命令的有效性可以达到 3 个小时

#+begin_src nim :noweb-ref inside-light-on
  put "/@boxid/inside-light/on":
    var
      pin = generate_pin(0)
      json = %*{"command": "inside-light-on", "expires-at": epochTime().toInt() + 3 * 60 * 60, "pin": pin}
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src
** 关灯

关灯命令的有效性可以达到 3 个小时

#+begin_src nim :noweb-ref inside-light-off
  put "/@boxid/inside-light/off":
    var
      pin = generate_pin(0)
      json = %*{"command": "inside-light-off", "expires-at": epochTime().toInt() + 3 * 60 * 60, "pin": pin}
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src

* 外部照明管理
** 开灯

开灯命令的有效性可以达到 3 个小时

#+begin_src nim :noweb-ref outside-light-on
  put "/@boxid/outside-light/on":
    var
      pin = generate_pin(1)
      json = %*{"command": "outside-light-on", "expires-at": epochTime().toInt() + 3 * 60 * 60, "pin": pin}
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src

** 关灯

关灯命令的有效性可以达到 3 个小时

#+begin_src nim :noweb-ref outside-light-off
  put "/@boxid/outside-light/off":
    var
      pin = generate_pin(1)
      json = %*{"command": "outside-light-off", "expires-at": epochTime().toInt() + 3 * 60 * 60, "pin": pin}
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src

* 紫外线管理
** 开灯

开灯命令的有效性可以达到 30 分钟

#+begin_src nim :noweb-ref ultraviolet-on
  put "/@boxid/ultraviolet/on":
    var
      pin = generate_pin(2)
      json = %*{"command": "ultraviolet-on", "expires-at": epochTime().toInt() + 30 * 60, "pin": pin}
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src

** 关灯

关灯命令的有效性可以达到 30 分钟

#+begin_src nim :noweb-ref ultraviolet-off
  put "/@boxid/ultraviolet/off":
    var
      pin = generate_pin(2)
      json = %*{"command": "ultraviolet-off", "expires-at": epochTime().toInt() + 30 * 60, "pin": pin}
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src

* 摄像头管理
** 打开

打开摄像头命令的有效性可以达到 30 分钟

#+begin_src nim :noweb-ref camera-on
  put "/@boxid/camera/on":
    var
      pin = generate_pin(3)
      json = %*{"command": "camera-on", "expires-at": epochTime().toInt() + 30 * 60, "pin": pin}
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src

** 关闭

关闭摄像头的有效性可以达到 30 分钟

#+begin_src nim :noweb-ref camera-off
  put "/@boxid/camera/off":
    var
      pin = generate_pin(3)
      json = %*{"command": "camera-off", "expires-at": epochTime().toInt() + 30 * 60, "pin": pin}
      okay = false
    try:
      discard redis_client.lPush(key = "tasks." & @"boxid", value = $json)
      okay = true
    except:
      redis_client = redis.open()
    if okay:
      resp Http200, "Okay"
    else:
      resp Http500, ""
#+end_src


* 充电管理
* 辅助函数
** 生成 PIN 值
*** 锁 PIN 值
   PIN 为当前时间戳与 64 取模，外加板号，锁号，命令编号的结果，用于保证锁控板对同一个命令只执行一次。
#+begin_src nim :noweb-ref generate-lock-pin
  proc generate_lock_pin(board: int, lock: int, cmd: int): int =
    result = cast[int](cast[int64](epochTime().toInt() shr 3) mod 64) or (board shl 13) or (lock shl 8) or (cmd shl 6)
#+end_src
*** 其他 PIN 值

   PIN 为当前时间戳除 10 与 8192 取模，外加设备编号的结果，用于保证每10秒内，对同一个设备只执行一次命令。
| no | dev           |
|----+---------------|
|  0 | inside-light  |
|  1 | outside-light |
|  2 | ultraviolet   |
|  3 | camera        |

#+begin_src nim :noweb-ref generate-pin
  proc generate_pin(dev: int): int =
    result = cast[int](cast[int64](epochTime().toInt() shr 3) and 8191) or (dev shl 13)
#+end_src

** fib

查表法计算有限的 fib

#+begin_src nim :noweb-ref fib

  const fibs = @[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903];

  proc fib(n: int): int =
    return fibs[n]
#+end_src
