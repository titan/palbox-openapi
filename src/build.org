* 编译设置

#+begin_src text :noweb-ref app-version
  0.1.0
#+end_src

#+begin_src nimscript :exports code :noweb yes :mkdirp yes :tangle /dev/shm/openapi/openapi.nimble
  # Package

  version       = "<<app-version>>"
  author        = "Titan"
  description   = "Restful server for pineapple box"
  license       = "MIT"

  bin           = @["openapi"]
  srcDir        = "src"

  # Dependencies

  requires "nim >= 0.17.0"
  requires "jester >= 0.2.0", "redis >= 0.2.0", "hmac >= 0.1.5", "strfmt >= 0.8.5"
#+end_src

* 发行脚本
#+begin_src text :exports code :noweb yes :mkdirp yes :tangle /dev/shm/openapi/Dockerfile
  FROM hive/nim-base:3.6

  COPY admin_api_server /admin-api-server
  COPY wait-for /wait-for

  CMD trap exit TERM; /admin-api-server & wait
#+end_src

#+begin_src text :noweb-ref name
  openapi
#+end_src

#+begin_src text :noweb-ref tag
  hive/<<name>>:<<app-version>>
#+end_src

#+begin_src shell :exports code :noweb no :mkdirp yes :tangle /dev/shm/openapi/wait-for
#!/bin/sh

TIMEOUT=15
QUIET=0

echoerr() {
  if [ "$QUIET" -ne 1 ]; then printf "%s\n" "$*" 1>&2; fi
}

usage() {
  exitcode="$1"
  cat << USAGE >&2
Usage:
  $cmdname host:port [-t timeout] [-- command args]
  -q | --quiet                        Do not output any status messages
  -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout
  -- COMMAND ARGS                     Execute command with args after the test finishes
USAGE
  exit "$exitcode"
}

wait_for() {
  command="$*"
  for i in `seq $TIMEOUT` ; do
    nc -z "$HOST" "$PORT" > /dev/null 2>&1

    result=$?
    if [ $result -eq 0 ] ; then
      if [ -n "$command" ] ; then
        exec $command
      fi
      exit 0
    fi
    sleep 1
  done
  echo "Operation timed out" >&2
  exit 1
}

while [ $# -gt 0 ]
do
  case "$1" in
    *:* )
    HOST=$(printf "%s\n" "$1"| cut -d : -f 1)
    PORT=$(printf "%s\n" "$1"| cut -d : -f 2)
    shift 1
    ;;
    -q | --quiet)
    QUIET=1
    shift 1
    ;;
    -t)
    TIMEOUT="$2"
    if [ "$TIMEOUT" = "" ]; then break; fi
    shift 2
    ;;
    --timeout=*)
    TIMEOUT="${1#*=}"
    shift 1
    ;;
    --)
    shift
    break
    ;;
    --help)
    usage 0
    ;;
    *)
    echoerr "Unknown argument: $1"
    usage 1
    ;;
  esac
done

if [ "$HOST" = "" -o "$PORT" = "" ]; then
  echoerr "Error: you need to provide a host and port to test."
  usage 2
fi

wait_for "$@"
#+end_src

** 制作镜像
#+begin_src shell :exports code :noweb yes :mkdirp yes :tangle /dev/shm/openapi/build-image.sh
  #! /bin/sh
  chmod 755 wait-for
  docker build -t <<tag>> .
#+end_src

** 导出镜像
#+begin_src shell :exports code :noweb yes :mkdirp yes :tangle /dev/shm/openapi/export-image.sh
  #! /bin/sh
  docker save -o /dev/shm/<<name>>-<<app-version>>.tar <<tag>>
  xz -z -9 /dev/shm/<<name>>-<<app-version>>.tar
#+end_src

** 清除镜像
#+begin_src shell :exports code :noweb yes :mkdirp yes :tangle /dev/shm/openapi/clean-image.sh
  #! /bin/sh
  docker rmi <<tag>>
#+end_src

* 启动脚本

启动脚本基于 supervisor 来编写

#+begin_src conf :exports code :noweb yes :mkdirp yes :tangle /dev/shm/openapi/box-openapi.ini
  [program:box-openapi]
  command=/opt/box-openapi/openapi
  directory=/opt/box-openapi/
  user=nobody
  redirect_stderr=false
  stdout_logfile=AUTO
  stdout_capture_maxbytes=1MB
  stdout_events_enabled=false
  stderr_logfile=AUTO
  stderr_capture_maxbytes=1MB
  stderr_events_enabled=false
#+end_src
